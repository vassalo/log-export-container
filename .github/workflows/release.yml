on:
  push:
    branches: [ main ]
  workflow_dispatch:

name: main-release

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Bump version and push tag
        id: version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          RELEASE_BRANCHES: main
          DEFAULT_BUMP: patch
          TAG_CONTEXT: branch

      - name: Trigger LEC Config Builder deployment
        run: |
          curl -XPOST -u "${{ secrets.PAT_USERNAME}}:${{secrets.PAT_TOKEN}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/vassalo/lec-config-builder/dispatches --data '{"event_type": "build_application"}'

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws/strongdm
          ECR_REPOSITORY: log-export-container
          IMAGE_TAG: ${{ steps.version.outputs.new_tag }}
        run: |
          # Adding version
          echo _version_=\"$IMAGE_TAG\" > fluentd/_version.rb
          # Create multiarch builder container
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name multiarch --driver docker-container --use
          # Building docker image for multiple platforms
          docker buildx build --platform "linux/amd64,linux/arm64" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Pushing image to ECR
          # aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
